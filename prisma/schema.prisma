generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  nextProfile NextProfile?

  @@unique([email])
  @@map("user")
}

model NextProfile {
  id    String @id @default(cuid())
  name  String
  email String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  nextTeamId String?
  NextTeam   NextTeam? @relation(fields: [nextTeamId], references: [id])

  ProjectAttachments ProjectAttachments[]

  @@map("next_profile")
}

model NextTeam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members NextProfile[]
  project NextProject[]

  @@map("next_team")
}

model NextProject {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())

  nextTeamId String
  team       NextTeam @relation(fields: [nextTeamId], references: [id], onDelete: Cascade)

  attachments ProjectAttachments[]

  @@map("next_project")
}

model ProjectAttachments {
  id   String @id @default(cuid())
  name String
  type String @default("pdf")
  size Bytes?

  projectId String
  project   NextProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  uploadedById String
  uploadedBy   NextProfile @relation(fields: [uploadedById], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
